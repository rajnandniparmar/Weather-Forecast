# -*- coding: utf-8 -*-
"""prophet.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12yFj1EZrhAVcKRCBRGNXzUsH_VyAwEna
"""

!pip install prophet

from prophet import Prophet

import pandas as pd

# Assuming the uploaded file is named 'data11.xlsx'
df = pd.read_excel('data11.xlsx')

# Assuming 'Date' is the column containing dates and 'BASEL_temp_mean' is the target variable
df.rename(columns={'Date': 'ds', 'BASEL_temp_mean': 'y'}, inplace=True)

# Create a Prophet model
model = Prophet()

# Fit the model with the prepared DataFrame
model.fit(df)

# Make future predictions (e.g., forecast for the next 365 days)
future = model.make_future_dataframe(periods=365)
forecast = model.predict(future)

# Plot the forecast
fig = model.plot(forecast)

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt

# Split data into features (X) and target variable (y)
X = df[['ds']]  # Features (date column)
y = df['y']      # Target variable (temperature)

# Split data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Print the sizes of training and testing sets
print("Training set size:", len(X_train))
print("Testing set size:", len(X_test))

from math import sqrt
import matplotlib.pyplot as plt
from prophet import Prophet

# Create a Prophet model
model = Prophet()

# Fit the model with the training data
train_data = pd.DataFrame({'ds': X_train['ds'], 'y': y_train})
model.fit(train_data)

# Make predictions on the test set
test_data = pd.DataFrame({'ds': X_test['ds']})
forecast = model.predict(test_data)

# Extract predicted values and ground truth
y_pred = forecast['yhat'].values
y_true = y_test.values

# Calculate RMSE (Root Mean Squared Error)
rmse = sqrt(mean_squared_error(y_true, y_pred))
print("Root Mean Squared Error (RMSE):", rmse)

# Convert datetime column to pandas datetime format if not already
test_data['ds'] = pd.to_datetime(test_data['ds'])

# Plot actual vs. predicted values
plt.figure(figsize=(12, 6))
plt.plot(test_data['ds'], y_true, label='Actual', color='blue')
plt.plot(test_data['ds'], y_pred, label='Predicted', color='red', linestyle='--')
plt.title('Prophet Forecast - Actual vs. Predicted')
plt.xlabel('Date')
plt.ylabel('Temperature (Â°C)')
plt.xticks(rotation=45)  # Rotate x-axis labels for better visibility
plt.legend()
plt.show()